<!doctype html>
<html lang="pl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Royal Fortuna ‚Äî Skrzynki (Demo)</title>
<meta name="description" content="Royal Fortuna ‚Äî demo skrzynek. Gra wy≈ÇƒÖcznie na kredyty; brak prawdziwych pieniƒôdzy."/>
<style>
  :root{
    --bg:#071022; --card:#0b1220; --accent:#f59e0b; --muted:#94a3b8;
    --glass: rgba(255,255,255,0.03); --radius:12px; --max-w:1100px;
  }
  *{box-sizing:border-box}
  body{margin:0;font-family:Inter, system-ui, -apple-system, 'Segoe UI', Roboto, Arial;color:#e6eef6;background:linear-gradient(180deg,#021021, #071026 70%);-webkit-font-smoothing:antialiased}
  .wrap{max-width:var(--max-w);margin:28px auto;padding:20px}
  header{display:flex;align-items:center;justify-content:space-between;gap:12px;margin-bottom:18px}
  .logo{display:flex;align-items:center;gap:12px}
  .logo .mark{width:56px;height:56px;background:linear-gradient(135deg,var(--accent),#ef4444);border-radius:12px;display:flex;align-items:center;justify-content:center;font-weight:900;color:#071023;font-size:20px}
  nav a{color:var(--muted);text-decoration:none;margin-left:14px;font-weight:600}
  .hero{display:grid;grid-template-columns:1fr 360px;gap:18px;align-items:start}
  .card{background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));border-radius:var(--radius);padding:18px;border:1px solid rgba(255,255,255,0.03);box-shadow:0 6px 24px rgba(2,6,23,0.6)}
  .title{font-size:22px;margin:0 0 8px}
  .muted{color:var(--muted)}
  .balanceRow{display:flex;align-items:center;gap:10px;justify-content:space-between;margin-bottom:12px}
  .balance{background:rgba(255,255,255,0.02);padding:8px 12px;border-radius:10px;font-weight:800}
  .boxes{display:flex;gap:12px;flex-wrap:wrap}
  .box{flex:1;min-width:220px;padding:12px;border-radius:10px;background:linear-gradient(180deg, rgba(255,255,255,0.015), transparent);border:1px solid rgba(255,255,255,0.02);text-align:center}
  .box .name{font-weight:800;margin-bottom:6px}
  .price{font-weight:800;color:var(--accent);margin-bottom:8px}
  .btn{background:var(--accent);padding:10px 14px;border-radius:10px;font-weight:700;color:#071023;border:none;cursor:pointer}
  .btn.ghost{background:transparent;border:1px solid rgba(255,255,255,0.06);color:var(--muted)}
  .inventory{margin-top:14px;display:grid;grid-template-columns:repeat(3,1fr);gap:10px}
  .invItem{background:rgba(255,255,255,0.02);padding:8px;border-radius:8px;text-align:center}
  .small{font-size:13px;color:var(--muted)}
  .center{display:flex;align-items:center;gap:8px}
  #crateArea{margin-top:16px;min-height:160px;display:flex;align-items:center;justify-content:center}
  /* spinner/rolling visual */
  .roller{width:80%;max-width:600px;height:120px;display:flex;align-items:center;overflow:hidden;border-radius:10px;border:1px solid rgba(255,255,255,0.02);background:linear-gradient(90deg, rgba(255,255,255,0.01), rgba(255,255,255,0.02))}
  .rollerTrack{display:flex;transform:translateX(0);transition:transform 0.5s cubic-bezier(.2,.9,.2,1)}
  .slot{min-width:160px;flex:0 0 160px;padding:12px;text-align:center;border-left:1px dashed rgba(255,255,255,0.02)}
  .slot:first-child{border-left:none}
  .itemIcon{font-size:30px;margin-bottom:8px}
  .highlight{box-shadow:0 0 0 4px rgba(245,158,11,0.08);border-radius:8px}
  .inventoryTitle{display:flex;justify-content:space-between;align-items:center;margin-top:12px}
  .history{margin-top:12px;color:var(--muted);font-size:13px;max-height:120px;overflow:auto;padding-right:6px}
  footer{margin-top:18px;color:var(--muted);font-size:13px}
  @media (max-width:980px){.hero{grid-template-columns:1fr}.inventory{grid-template-columns:repeat(2,1fr)}.slot{min-width:120px;flex:0 0 120px}}
  @media (max-width:640px){.inventory{grid-template-columns:1fr}.wrap{margin:10px;padding:12px}}
</style>
</head>
<body>
  <div class="wrap">
    <header>
      <div class="logo">
        <div class="mark">RF</div>
        <div>
          <div style="font-weight:900">Royal Fortuna ‚Äî Skrzynki (Demo)</div>
          <div class="muted" style="font-size:13px">Tylko kredyty. ≈ªadnych prawdziwych pieniƒôdzy.</div>
        </div>
      </div>
      <nav>
        <a href="#boxes" class="muted">Skrzynki</a>
        <a href="#inventory" class="muted">Ekwipunek</a>
      </nav>
    </header>

    <section class="hero">
      <div>
        <div class="card">
          <div class="balanceRow">
            <div class="center">
              <div class="muted">Twoje kredyty:</div>
              <div class="balance" id="balance">1000</div>
            </div>
            <div class="small">Demo ‚Ä¢ 2025</div>
          </div>

          <div id="boxes" class="boxes">
            <!-- boxes inserted by JS -->
          </div>

          <div id="crateArea">
            <div id="rollerWrap" style="width:100%;display:none">
              <div class="roller" id="roller">
                <div class="rollerTrack" id="rollerTrack">
                  <!-- items generated -->
                </div>
              </div>
            </div>
            <div id="idleMessage" class="muted">Wybierz skrzynkƒô aby otworzyƒá (animacja poka≈ºe losowanie przedmiotu)</div>
          </div>

          <div style="display:flex;gap:10px;margin-top:12px;align-items:center">
            <button class="btn ghost" onclick="resetDemo()">Reset demo</button>
            <button class="btn ghost" onclick="showHistory()">Poka≈º historiƒô</button>
            <div style="margin-left:auto" class="small">Najta≈Ñsza skrzynka: 500 kredyt√≥w</div>
          </div>

          <div id="historyPanel" class="history" style="display:none"></div>
        </div>

        <div id="inventorySection" class="card" style="margin-top:12px">
          <div class="inventoryTitle">
            <div style="font-weight:800">Ekwipunek</div>
            <div class="muted small">Posiadane przedmioty (ikona, nazwa, warto≈õƒá)</div>
          </div>
          <div id="inventory" class="inventory" style="margin-top:10px">
            <!-- items -->
          </div>
        </div>

      </div>

      <aside>
        <div class="card">
          <h4 style="margin:0 0 8px">Instrukcja</h4>
          <div class="muted small">
            <p style="margin:6px 0">‚Ä¢ Ka≈ºda skrzynka kosztuje kredyty (tylko demo). Najta≈Ñsza = 500.</p>
            <p style="margin:6px 0">‚Ä¢ Po otwarciu animacja losuje jeden przedmiot, kt√≥ry trafia do ekwipunku.</p>
            <p style="margin:6px 0">‚Ä¢ Przedmioty i ich warto≈õci: digi dong (500), bibon (2000), boblex (5000), tung tung (10000).</p>
            <p style="margin:6px 0">‚Ä¢ Dwie dro≈ºsze skrzynki sƒÖ o 500 kredyt√≥w dro≈ºsze ni≈º poprzednia (500, 1000, 1500).</p>
          </div>

          <div style="margin-top:12px">
            <div style="font-weight:800;margin-bottom:6px">Szybkie akcje</div>
            <div style="display:flex;gap:8px;flex-wrap:wrap">
              <button class="btn" onclick="addCredits(1000)">Dodaj 1000 kredyt√≥w</button>
              <button class="btn ghost" onclick="toggleHistoryPanel()">Ukryj/ Poka≈º historiƒô</button>
            </div>
          </div>

        </div>
      </aside>
    </section>

    <footer>
      <div style="display:flex;justify-content:space-between;align-items:center;gap:12px;flex-wrap:wrap">
        <div>¬© Royal Fortuna ‚Äî Demo. Gra wy≈ÇƒÖcznie dla zabawy.</div>
        <div class="muted">Polityka demo ‚Ä¢ Regulamin</div>
      </div>
    </footer>
  </div>

<script>
/* Demo lootbox system
 Boxes: 3 types. Prices: 500, 1000, 1500 (each next +500).
 Items: digi dong (500), bibon (2000), boblex (5000), tung tung (10000)
 Roller animation: creates track of items and scrolls, then stops at chosen index.
 Storage in localStorage: balance, inventory, history.
*/

const BOXES = [
  { id: 'box1', name: 'Skrzynka BrƒÖzowa', price: 500, description: 'Najta≈Ñsza skrzynka ‚Äî szansa na podstawowe przedmioty.' },
  { id: 'box2', name: 'Skrzynka Srebrna', price: 1000, description: '≈örednia skrzynka ‚Äî lepsze nagrody.' },
  { id: 'box3', name: 'Skrzynka Z≈Çota', price: 1500, description: 'Najlepsza skrzynka ‚Äî najwiƒôksze szanse na rzadkie przedmioty.' },
];

const ITEMS = [
  { key:'digi', name:'digi dong', value:500, emoji:'üîã' },
  { key:'bibon', name:'bibon', value:2000, emoji:'üîî' },
  { key:'boblex', name:'boblex', value:5000, emoji:'üíé' },
  { key:'tung', name:'tung tung', value:10000, emoji:'üåü' },
];

const DEFAULT_BALANCE = 2000;
const BAL_KEY = 'rf_demo_balance_v2';
const INV_KEY = 'rf_demo_inventory_v2';
const HIST_KEY = 'rf_demo_history_v2';

function getBalance(){ return parseInt(localStorage.getItem(BAL_KEY) || DEFAULT_BALANCE, 10); }
function setBalance(v){ localStorage.setItem(BAL_KEY, String(v)); document.getElementById('balance').textContent = v; }
function getInventory(){ return JSON.parse(localStorage.getItem(INV_KEY) || '{}'); }
function setInventory(obj){ localStorage.setItem(INV_KEY, JSON.stringify(obj)); renderInventory(); }
function addHistory(txt){ const arr = JSON.parse(localStorage.getItem(HIST_KEY) || '[]'); arr.unshift(new Date().toLocaleString() + ' ‚Äî ' + txt); if(arr.length>200) arr.pop(); localStorage.setItem(HIST_KEY, JSON.stringify(arr)); renderHistory(); }
function getHistory(){ return JSON.parse(localStorage.getItem(HIST_KEY) || '[]'); }

function init(){
  if(localStorage.getItem(BAL_KEY)===null) localStorage.setItem(BAL_KEY, DEFAULT_BALANCE);
  renderBoxes();
  setBalance(getBalance());
  renderInventory();
  renderHistory();
}
function renderBoxes(){
  const wrap = document.getElementById('boxes');
  wrap.innerHTML = '';
  BOXES.forEach(b=>{
    const div = document.createElement('div'); div.className='box card';
    div.innerHTML = `<div class="name">${b.name}</div>
                     <div class="small muted">${b.description}</div>
                     <div class="price">${b.price} kredyt√≥w</div>
                     <div style="margin-top:8px"><button class="btn" onclick="openBox('${b.id}')">Otw√≥rz</button></div>`;
    wrap.appendChild(div);
  });
}

function renderInventory(){
  const inv = getInventory();
  const container = document.getElementById('inventory');
  container.innerHTML = '';
  const keys = Object.keys(inv);
  if(keys.length===0){ container.innerHTML = '<div class="muted">Brak przedmiot√≥w ‚Äî otw√≥rz skrzynki, aby zdobyƒá przedmioty.</div>'; return; }
  keys.forEach(k=>{
    const item = ITEMS.find(i=>i.key===k);
    const count = inv[k];
    const el = document.createElement('div'); el.className='invItem';
    el.innerHTML = `<div class="itemIcon">${item.emoji}</div><div style="font-weight:800">${item.name}</div><div class="small muted">Warto≈õƒá: ${item.value} ‚Ä¢ Ilo≈õƒá: ${count}</div>`;
    container.appendChild(el);
  });
}

function renderHistory(){
  const panel = document.getElementById('historyPanel');
  const arr = getHistory();
  if(!panel) return;
  if(arr.length===0){ panel.innerHTML = '<div class="muted">Brak zapisanych zdarze≈Ñ.</div>'; return; }
  panel.innerHTML = arr.map(a=>'<div style="padding:6px 0;border-bottom:1px dashed rgba(255,255,255,0.02)">'+a+'</div>').join('');
}

function addCredits(n){
  const bal = getBalance()+n;
  setBalance(bal);
  addHistory('Dodano kredyty: '+n);
  alert('Dodano ' + n + ' kredyt√≥w.');
}

function resetDemo(){
  if(!confirm('Zresetowaƒá saldo, ekwipunek i historiƒô?')) return;
  localStorage.removeItem(BAL_KEY);
  localStorage.removeItem(INV_KEY);
  localStorage.removeItem(HIST_KEY);
  localStorage.setItem(BAL_KEY, DEFAULT_BALANCE);
  setBalance(DEFAULT_BALANCE);
  renderInventory();
  renderHistory();
  alert('Demo zresetowane.');
}

/* Opening logic */
function openBox(boxId){
  const box = BOXES.find(b=>b.id===boxId);
  if(!box) return;
  let bal = getBalance();
  if(bal < box.price){ alert('Masz za ma≈Ço kredyt√≥w.'); return; }
  // subtract
  bal -= box.price;
  setBalance(bal);
  addHistory('Otwarto '+box.name+' (koszt '+box.price+')');
  // determine pool and probabilities depending on box
  const pool = buildPoolForBox(boxId);
  // choose random index
  const chosen = weightedRandFromPool(pool);
  // animate roller
  startRollerAnimation(pool, chosen, function(finalItemKey){
    // award item
    const inv = getInventory();
    inv[finalItemKey] = (inv[finalItemKey]||0)+1;
    setInventory(inv);
    addHistory('Otrzymano: '+ITEMS.find(x=>x.key===finalItemKey).name);
    // small notification
    setTimeout(()=>{ alert('Otrzymano: '+ITEMS.find(x=>x.key===finalItemKey).name); }, 500);
  });
}

// build pool with weights. Pool entries are objects {key, weight}
function buildPoolForBox(boxId){
  // base weights
  // box1: common digi high, bibon small
  // box2: bibon medium, boblex small, digi small
  // box3: boblex higher, tung rare, bibon medium
  if(boxId==='box1'){
    return [
      {key:'digi', weight:70},
      {key:'bibon', weight:25},
      {key:'boblex', weight:5},
      {key:'tung', weight:1}
    ];
  } else if(boxId==='box2'){
    return [
      {key:'digi', weight:40},
      {key:'bibon', weight:40},
      {key:'boblex', weight:15},
      {key:'tung', weight:5}
    ];
  } else {
    return [
      {key:'digi', weight:20},
      {key:'bibon', weight:40},
      {key:'boblex', weight:30},
      {key:'tung', weight:10}
    ];
  }
}

function weightedRandFromPool(pool){
  const expanded = [];
  pool.forEach(p=>{
    for(let i=0;i<p.weight;i++) expanded.push(p.key);
  });
  const idx = Math.floor(Math.random()*expanded.length);
  return expanded[idx];
}

/* Roller animation:
 - create an array of items repeated to fill the track
 - compute index of first occurrence of chosen key in the middle area after many cycles
 - animate transform translateX with easing and duration to land on chosen item
*/
let rollerRunning = false;
function startRollerAnimation(pool, chosenKey, cb){
  if(rollerRunning) return;
  rollerRunning = true;
  document.getElementById('idleMessage').style.display='none';
  const rollerWrap = document.getElementById('rollerWrap');
  rollerWrap.style.display = 'block';
  const track = document.getElementById('rollerTrack');
  track.style.transition = 'none';
  track.innerHTML = '';
  // build visual list: convert pool to array with duplicates weighted
  const visualArray = [];
  const weights = {};
  pool.forEach(p=> weights[p.key]=p.weight);
  // create base set of visible items (unique sequence)
  const base = [];
  Object.keys(weights).forEach(k=> base.push(k));
  // fill visualArray with many cycles
  const cycles = 20; // number of cycles to allow long scroll
  for(let c=0;c<cycles;c++){
    // shuffle base a bit based on weights
    const shuffled = weightedShuffle(base, weights);
    shuffled.forEach(k=> visualArray.push(k));
  }
  // pick a target index somewhere near the end so animation scrolls
  // find indices of chosenKey
  const indices = visualArray.map((v,i)=> v===chosenKey ? i : -1).filter(i=>i>=0);
  // choose one towards the end
  const targetIndex = indices[Math.floor(indices.length * 0.75)] || indices[0] || 0;
  // create DOM slots
  visualArray.forEach(k=>{
    const it = ITEMS.find(x=>x.key===k);
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerHTML = `<div class="itemIcon">${it.emoji}</div><div style="font-weight:800">${it.name}</div><div class="small muted">${it.value} kred.</div>`;
    track.appendChild(slot);
  });
  // measure slot width
  const slotEl = track.querySelector('.slot');
  const slotW = slotEl ? slotEl.getBoundingClientRect().width : 160;
  // compute translate so that targetIndex appears centered (approx)
  // center pos: we want the target slot to be at center of roller (visible area)
  const roller = document.getElementById('roller');
  const visibleWidth = roller.getBoundingClientRect().width;
  const centerOffset = Math.floor((visibleWidth - slotW)/2);
  const totalTranslate = - (targetIndex * slotW) + centerOffset;
  // initial position: 0
  // animate: first speed, then slow - use transition with duration
  // create small delay and then animate
  setTimeout(()=>{
    track.style.transition = 'transform 3s cubic-bezier(.18,.83,.32,1)';
    track.style.transform = `translateX(${totalTranslate}px)`;
    // highlight chosen slot after animation ends
    track.addEventListener('transitionend', function handler(){
      track.removeEventListener('transitionend', handler);
      // highlight the centered slot: compute which is centered
      const slots = Array.from(track.querySelectorAll('.slot'));
      slots.forEach(s=> s.classList.remove('highlight'));
      const centerPos = -Math.round(totalTranslate) + centerOffset;
      const centeredIndex = Math.round(centerPos/slotW);
      const finalSlot = slots[centeredIndex];
      if(finalSlot) finalSlot.classList.add('highlight');
      rollerRunning = false;
      // call callback with chosenKey
      if(typeof cb === 'function') cb(chosenKey);
    }, {once:true});
  }, 60);
}

// weighted shuffle: return array of keys ordered with weights influencing order
function weightedShuffle(keys, weights){
  // simple approach: create array with repetition and pick randomly without replacement
  const pool = [];
  keys.forEach(k=>{
    const w = weights[k] || 1;
    for(let i=0;i<w;i++) pool.push(k);
  });
  const out = [];
  while(pool.length && out.length < keys.length){
    const idx = Math.floor(Math.random()*pool.length);
    const k = pool.splice(idx,1)[0];
    if(!out.includes(k)) out.push(k);
  }
  // fill missing
  keys.forEach(k=>{ if(!out.includes(k)) out.push(k); });
  return out;
}

/* simple UI helpers */
function showHistory(){
  const panel = document.getElementById('historyPanel');
  panel.style.display = panel.style.display==='none' ? 'block' : 'none';
}

function toggleHistoryPanel(){ showHistory(); }

init();
</script>
</body>
</html>
